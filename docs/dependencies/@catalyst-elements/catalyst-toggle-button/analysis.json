{"schema_version":"1.0.0","namespaces":[{"name":"CatalystElements","description":"Namespace for all the Catalyst Elements.","summary":"","sourceRange":{"file":"dist/catalyst-toggle-button.js","start":{"line":6,"column":2},"end":{"line":6,"column":58}},"elements":[{"description":"`<catalyst-toggle-button>` is a toggle button web component.\n\n    <catalyst-toggle-button>Button</catalyst-toggle-button>\n\nIt may include optional form control setting for use in a form.\n\n    <catalyst-toggle-button name=\"form-element-name\" value=\"value\">Button</catalyst-toggle-button>\n\n### Focus\nTo focus a catalyst-toggle-button, you can call the native `focus()` method as long as the\nelement has a tab index. Similarly, `blur()` will blur the element.\n\n### Styling\n\nThere are no custom properties or mixins available for styling this component.","summary":"","path":"dist/catalyst-toggle-button.js","properties":[{"name":"_inputElement","type":"HTMLElement","description":"The element that will be submitting as part of a form to represent this component.","privacy":"protected","sourceRange":{"start":{"line":114,"column":8},"end":{"line":114,"column":26}},"metadata":{"polymer":{"readOnly":false}},"defaultValue":"document.createElement('input')"},{"name":"checked","type":"boolean","description":"States whether or not this element is checked.","privacy":"public","sourceRange":{"start":{"line":197,"column":6},"end":{"line":199,"column":7}},"metadata":{"polymer":{"readOnly":false}}},{"name":"pressed","type":"boolean","description":"States whether or not this element is pressed.","privacy":"public","sourceRange":{"start":{"line":220,"column":6},"end":{"line":222,"column":7}},"metadata":{"polymer":{"readOnly":false}}},{"name":"disabled","type":"boolean","description":"States whether or not this element is disabled.","privacy":"public","sourceRange":{"start":{"line":243,"column":6},"end":{"line":245,"column":7}},"metadata":{"polymer":{"readOnly":false}}},{"name":"required","type":"boolean","description":"States whether or not this element is required.","privacy":"public","sourceRange":{"start":{"line":266,"column":6},"end":{"line":268,"column":7}},"metadata":{"polymer":{"readOnly":false}}},{"name":"name","type":"string","description":"The name of this element. Used for forms.","privacy":"public","sourceRange":{"start":{"line":283,"column":6},"end":{"line":289,"column":7}},"metadata":{"polymer":{"readOnly":false}}},{"name":"form","type":"HTMLFormElement","description":"The form this element is apart of.","privacy":"public","sourceRange":{"start":{"line":295,"column":6},"end":{"line":297,"column":7}},"metadata":{"polymer":{"readOnly":true}}},{"name":"value","type":"string","description":"The value this element has. Used for forms.","privacy":"public","sourceRange":{"start":{"line":312,"column":6},"end":{"line":318,"column":7}},"metadata":{"polymer":{"readOnly":false}}},{"name":"inputElement","type":"HTMLInputElement","description":"The input element.","privacy":"public","sourceRange":{"start":{"line":324,"column":6},"end":{"line":326,"column":7}},"metadata":{"polymer":{"readOnly":true}}}],"methods":[{"name":"connectedCallback","description":"Fires when the element is inserted into the DOM.","privacy":"public","sourceRange":{"start":{"line":122,"column":6},"end":{"line":149,"column":7}},"metadata":{},"params":[]},{"name":"_upgradeProperty","description":"Upgrade the property on this element with the given name.\n\nA user may set a property on an _instance_ of an element before its prototype has been connected to this class.\nThis method will check for any instance properties and run them through the proper class setters.\n\nSee the [lazy properties](/web/fundamentals/architecture/building-components/best-practices#lazy-properties) section for more details.","privacy":"protected","sourceRange":{"start":{"line":161,"column":6},"end":{"line":169,"column":7}},"metadata":{},"params":[{"name":"prop","type":"string","description":"The name of a property."}]},{"name":"disconnectedCallback","description":"Fires when the element is removed from the DOM.","privacy":"public","sourceRange":{"start":{"line":173,"column":6},"end":{"line":176,"column":7}},"metadata":{},"params":[]},{"name":"attributeChangedCallback","description":"Fired when any of the attributes in the `observedAttributes` array change.","privacy":"public","sourceRange":{"start":{"line":337,"column":6},"end":{"line":395,"column":7}},"metadata":{},"params":[{"name":"name","type":"string","description":"The name of the attribute that changed."},{"name":"oldValue","type":"*","description":"The original value of the attribute that changed."},{"name":"newValue","type":"*","description":"The new value of the attribute that changed."}]},{"name":"_onKeyDown","description":"Called when a key is pressed on this element.","privacy":"protected","sourceRange":{"start":{"line":401,"column":6},"end":{"line":417,"column":7}},"metadata":{},"params":[{"name":"event","type":"KeyboardEvent"}]},{"name":"_onClick","description":"Called when this element is clicked.","privacy":"protected","sourceRange":{"start":{"line":421,"column":6},"end":{"line":423,"column":7}},"metadata":{},"params":[]},{"name":"_toggleChecked","description":"`_toggleChecked()` calls the either the `checked` or `pressed` setter and flips its state.\nBecause `_toggleChecked()` is only caused by a user action, it will\nalso dispatch a change event.","privacy":"protected","sourceRange":{"start":{"line":431,"column":6},"end":{"line":456,"column":7}},"metadata":{},"params":[]}],"staticMethods":[{"name":"register","description":"Register this class as an element.","privacy":"public","sourceRange":{"start":{"line":94,"column":6},"end":{"line":96,"column":7}},"metadata":{},"params":[]}],"demos":[{"url":"demo/basic.html","description":"Basic"}],"metadata":{},"sourceRange":{"start":{"line":52,"column":4},"end":{"line":457,"column":5}},"privacy":"public","superclass":"HTMLElement","name":"CatalystElements.CatalystToggleButton","attributes":[{"name":"checked","description":"","sourceRange":{"start":{"line":82,"column":10},"end":{"line":82,"column":19}},"metadata":{}},{"name":"pressed","description":"","sourceRange":{"start":{"line":83,"column":10},"end":{"line":83,"column":19}},"metadata":{}},{"name":"disabled","description":"","sourceRange":{"start":{"line":84,"column":10},"end":{"line":84,"column":20}},"metadata":{}},{"name":"required","description":"","sourceRange":{"start":{"line":85,"column":10},"end":{"line":85,"column":20}},"metadata":{}},{"name":"name","description":"","sourceRange":{"start":{"line":86,"column":10},"end":{"line":86,"column":16}},"metadata":{}},{"name":"value","description":"","sourceRange":{"start":{"line":87,"column":10},"end":{"line":87,"column":17}},"metadata":{}},{"name":"form","description":"","sourceRange":{"start":{"line":88,"column":10},"end":{"line":88,"column":16}},"metadata":{}}],"events":[{"type":"CustomEvent","name":"change","description":"Fired when the component's `pressed` value changes due to user interaction.","metadata":{}}],"styling":{"cssVariables":[],"selectors":[]},"slots":[],"tagname":"catalyst-toggle-button"}]}]}